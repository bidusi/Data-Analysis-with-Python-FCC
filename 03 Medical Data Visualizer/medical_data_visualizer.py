# -*- coding: utf-8 -*-
"""medical-data-visualizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-tX1Q4PiUubOheBPrLP0shrXX7ZHE9ic
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline
#see the follwoing link for solution
#https://github.com/fuzzyray/medical-data-visualizer/blob/main/medical_data_visualizer.py#L28

# Import data
url="https://raw.githubusercontent.com/freeCodeCamp/boilerplate-medical-data-visualizer/main/medical_examination.csv"
df = pd.read_csv(url)

df.head()

bmi = df['weight']/((df['height']/100)**2)

bmi

def is_overweight(bmi):
    return 1 if bmi > 25 else 0

# Create the overweight series
df['overweight'] = bmi.apply(is_overweight)

print(df['overweight'])

df.describe()

df.head()

df.info()

def normalize(value):
  return 1 if value > 1 else 0
df['cholesterol'] = df['cholesterol'].apply(normalize)
print(df['cholesterol'])

df['gluc'] = df['gluc'].apply(normalize)



# Draw Categorical Plot
def draw_cat_plot():
 # Create DataFrame for cat plot using `pd.melt` using just the values from 'cholesterol', 'gluc', 'smoke', 'alco', 'active', and 'overweight'.
 df_cat=pd.melt(df,id_vars=['cardio'], value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'])
  # Group and reformat the data to split it by 'cardio'. Show the counts of each feature.
  # You will have to rename one of the columns for the catplot to work correctly.
 df_cat=df_cat.groupby(['cardio','variable','value']).size().reset_index()
 df_cat = df_cat.rename(columns={0: 'total'})
 graph = sns.catplot(data=df_cat, x="variable", y="total", kind='bar', hue="value", col="cardio")
 fig = graph.fig
  # Do not modify the next two lines
 fig.savefig('catplot.png')
 return fig

# Draw Heat Map
def draw_heat_map():
 # Clean the dat
 df_heat=df[(df['ap_lo']<= df['ap_hi']) &
 (df['height'] >= df['height'].quantile(0.025)) &
 (df['height'] <= df['height'].quantile(0.975)) &
 (df['weight'] >= df['weight'].quantile(0.025)) &
 (df['weight'] <= df['weight'].quantile(0.975))]
 # Calculate the correlation matrix
 corr= df_heat.corr()
 # Generate a mask for the upper triangle
 mask = np.triu(np.ones_like(corr))
 fig, ax = plt.subplots(figsize=(16, 9))
 sns.heatmap(data = corr, annot=True, square=True, linewidths = 0.5, linecolor = "white", mask = mask, fmt='0.1f', vmin = -0.16, vmax = 0.32, center=0.03)
 # Do not modify the next two lines
 fig.savefig('heatmap.png')
 return fig

draw_heat_map()

